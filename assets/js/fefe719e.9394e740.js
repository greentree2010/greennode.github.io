"use strict";(self.webpackChunkhakehardware=self.webpackChunkhakehardware||[]).push([[2069],{1258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=t(4848),s=t(8453);const r={},l="Vana DLP Setup Guide",i={id:"guides/node/vana/vana-node-setup",title:"Vana DLP Setup Guide",description:"Setting Up Your Environment",source:"@site/docs/guides/node/vana/vana-node-setup.md",sourceDirName:"guides/node/vana",slug:"/guides/node/vana/vana-node-setup",permalink:"/docs/guides/node/vana/vana-node-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/greentree2010/greentree2010.github.io/edit/main/docs/guides/node/vana/vana-node-setup.md",tags:[],version:"current",frontMatter:{},sidebar:"guides",previous:{title:"Story Validator Install Guide",permalink:"/docs/guides/node/story/run-story-validator"},next:{title:"Vana PoS Network Validator Setup",permalink:"/docs/guides/node/vana/vana-pos-validator-setup"}},o={},d=[{value:"Setting Up Your Environment",id:"setting-up-your-environment",level:3},{value:"Requirements",id:"requirements",level:2},{value:"Additional requirements for DLP creators:",id:"additional-requirements-for-dlp-creators",level:2},{value:"Step 1: Install Python 3.11",id:"step-1-install-python-311",level:3},{value:"Step 2: Install Poetry",id:"step-2-install-poetry",level:3},{value:"Step 3: Install Node.js &amp; npm",id:"step-3-install-nodejs--npm",level:3},{value:"Initial Setup",id:"initial-setup",level:2},{value:"Step 1: Clone the Vana DLP Git Repository",id:"step-1-clone-the-vana-dlp-git-repository",level:3},{value:"Step 2: Install Dependencies",id:"step-2-install-dependencies",level:3},{value:"Step 3: Install Vana CLI",id:"step-3-install-vana-cli",level:3},{value:"Step 4: Create Wallet",id:"step-4-create-wallet",level:3},{value:"Step 5: Export Private Keys",id:"step-5-export-private-keys",level:3},{value:"Step 6: Fund Wallet",id:"step-6-fund-wallet",level:3},{value:"Configure the DLP Contract",id:"configure-the-dlp-contract",level:2},{value:"1. Set <code>updateFileRewardDelay</code> to <code>0</code>.",id:"1-set-updatefilerewarddelay-to-0",level:3},{value:"2. Call <code>addRewardsForContributors</code> with <code>1000000000000000000000000</code> (1 million tokens).",id:"2-call-addrewardsforcontributors-with-1000000000000000000000000-1-million-tokens",level:3},{value:"Validator Setup",id:"validator-setup",level:2},{value:"Step 1: Fund Your Validator",id:"step-1-fund-your-validator",level:3},{value:"Step 2: Register Validator",id:"step-2-register-validator",level:3},{value:"Step 3: Run the Validator",id:"step-3-run-the-validator",level:3},{value:"For continuous background execution, use <strong>systemd</strong>:",id:"for-continuous-background-execution-use-systemd",level:3},{value:"Check logs:",id:"check-logs",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"vana-dlp-setup-guide",children:"Vana DLP Setup Guide"})}),"\n",(0,a.jsx)(n.h3,{id:"setting-up-your-environment",children:"Setting Up Your Environment"}),"\n",(0,a.jsx)(n.p,{children:"This guide will walk you through setting up the necessary tools and environment for either creating a DLP (Data Liquidity Pool) or joining one as a validator."}),"\n",(0,a.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,a.jsx)(n.p,{children:"For all participants:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Git"}),"\n",(0,a.jsx)(n.li,{children:"Python 3.11+"}),"\n",(0,a.jsx)(n.li,{children:"Poetry"}),"\n",(0,a.jsx)(n.li,{children:"Metamask or any EVM-compatible wallet"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"additional-requirements-for-dlp-creators",children:"Additional requirements for DLP creators:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Node.js and npm"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"step-1-install-python-311",children:"Step 1: Install Python 3.11"}),"\n",(0,a.jsx)(n.p,{children:"Start by ensuring your Python version is 3.11 or higher. Install it using the following steps:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt install software-properties-common\nsudo add-apt-repository ppa:deadsnakes/ppa\nsudo apt update\nsudo apt install python3.11 python3.11-venv python3.11-dev\npython3.11 --version\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-install-poetry",children:"Step 2: Install Poetry"}),"\n",(0,a.jsx)(n.p,{children:"Poetry is required for managing project dependencies. To install:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"curl -sSL https://install.python-poetry.org | python3 -\necho 'export PATH=\"$HOME/.local/bin:$PATH\"' >> $HOME/.bash_profile\nsource $HOME/.bash_profile\npoetry --version\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-install-nodejs--npm",children:"Step 3: Install Node.js & npm"}),"\n",(0,a.jsxs)(n.p,{children:["To manage Node.js versions, install ",(0,a.jsx)(n.strong,{children:"nvm"})," (Node Version Manager):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh | bash\necho \'export NVM_DIR="$HOME/.nvm"\' >> $HOME/.bash_profile\necho \'[ -s "$NVM_DIR/nvm.sh" ] && \\. "$NVM_DIR/nvm.sh"\' >> $HOME/.bash_profile\necho \'[ -s "$NVM_DIR/bash_completion" ] && \\. "$NVM_DIR/bash_completion"\' >> $HOME/.bash_profile\nsource $HOME/.bash_profile\nnvm install --lts\n'})}),"\n",(0,a.jsx)(n.p,{children:"Verify installation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"node -v\nnpm -v\n"})}),"\n",(0,a.jsx)(n.h2,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-clone-the-vana-dlp-git-repository",children:"Step 1: Clone the Vana DLP Git Repository"}),"\n",(0,a.jsx)(n.p,{children:"First, get a copy of the Vana DLP ChatGPT repository:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/vana-com/vana-dlp-chatgpt.git\ncd vana-dlp-chatgpt\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-2-install-dependencies",children:"Step 2: Install Dependencies"}),"\n",(0,a.jsx)(n.p,{children:"Next, install the necessary dependencies using Poetry:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"poetry install\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-install-vana-cli",children:"Step 3: Install Vana CLI"}),"\n",(0,a.jsx)(n.p,{children:"To interact with Vana, install the command-line tool:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pip install vana\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-4-create-wallet",children:"Step 4: Create Wallet"}),"\n",(0,a.jsx)(n.p,{children:"Generate your wallet for DLP participation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"vanacli wallet create --wallet.name default --wallet.hotkey default\n"})}),"\n",(0,a.jsx)(n.p,{children:"This will generate two key pairs:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Coldkey"}),": for manually managed actions (like staking)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Hotkey"}),": for validator-related operations (like submitting scores).\nAdd ",(0,a.jsx)(n.strong,{children:"Satori Testnet"})," to Metamask:"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Network name"}),": Satori Testnet"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"RPC URL"}),": ",(0,a.jsx)(n.code,{children:"https://rpc.satori.vana.org"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Chain ID"}),": ",(0,a.jsx)(n.code,{children:"14801"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Currency"}),": VANA"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"step-5-export-private-keys",children:"Step 5: Export Private Keys"}),"\n",(0,a.jsx)(n.p,{children:"Secure your keys by exporting them:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Coldkey\nvanacli wallet export_private_key\n# Hotkey\nvanacli wallet export_private_key\n"})}),"\n",(0,a.jsx)(n.p,{children:"Import these keys into Metamask."}),"\n",(0,a.jsx)(n.h3,{id:"step-6-fund-wallet",children:"Step 6: Fund Wallet"}),"\n",(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.a,{href:"https://faucet.vana.org",children:"VANA faucet"})," to request testnet tokens for both your coldkey and hotkey addresses.\nCreating a DLP\nGenerate Encryption Keys\nGenerate RSA key pairs for file encryption and decryption:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"./keygen.sh\n"})}),"\n",(0,a.jsx)(n.p,{children:"This will prompt you for personal details and generate key files.\nDeploy Smart Contracts\nFirst, clone the DLP smart contract repository:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd $HOME\ngit clone https://github.com/vana-com/vana-dlp-smart-contracts.git\ncd vana-dlp-smart-contracts\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Install ",(0,a.jsx)(n.strong,{children:"Yarn"})," and the contract dependencies:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"npm install -g yarn\nyarn install\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Update the ",(0,a.jsx)(n.code,{children:".env"})," file with your information, then deploy the contracts:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cp .env.example .env\nnano .env\nnpx hardhat deploy --network satori --tags DLPDeploy\n"})}),"\n",(0,a.jsx)(n.p,{children:"Contract Verification\nVerify the deployed contracts:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'npx hardhat verify --network satori <DataLiquidityPool address>\nnpx hardhat verify --network satori <DataLiquidityPoolToken address> "<DLP_TOKEN_NAME>" <DLP_TOKEN_SYMBOL> <OWNER_ADDRESS>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"configure-the-dlp-contract",children:"Configure the DLP Contract"}),"\n",(0,a.jsx)(n.p,{children:"Go to your contract's proxy page on the Satori explorer and perform the following actions:"}),"\n",(0,a.jsxs)(n.h3,{id:"1-set-updatefilerewarddelay-to-0",children:["1. Set ",(0,a.jsx)(n.code,{children:"updateFileRewardDelay"})," to ",(0,a.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,a.jsxs)(n.h3,{id:"2-call-addrewardsforcontributors-with-1000000000000000000000000-1-million-tokens",children:["2. Call ",(0,a.jsx)(n.code,{children:"addRewardsForContributors"})," with ",(0,a.jsx)(n.code,{children:"1000000000000000000000000"})," (1 million tokens)."]}),"\n",(0,a.jsx)(n.h2,{id:"validator-setup",children:"Validator Setup"}),"\n",(0,a.jsx)(n.h3,{id:"step-1-fund-your-validator",children:"Step 1: Fund Your Validator"}),"\n",(0,a.jsx)(n.p,{children:"If you're the DLP creator, send your DLP tokens to your coldkey and hotkey addresses. If you're joining, request tokens from the DLP creator."}),"\n",(0,a.jsx)(n.h3,{id:"step-2-register-validator",children:"Step 2: Register Validator"}),"\n",(0,a.jsx)(n.p,{children:"Run the following commands to register your validator:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"./vanacli dlp register_validator --stake_amount 10\n./vanacli dlp approve_validator --validator_address=<your hotkey address>\n"})}),"\n",(0,a.jsx)(n.h3,{id:"step-3-run-the-validator",children:"Step 3: Run the Validator"}),"\n",(0,a.jsx)(n.p,{children:"To start the validator process:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"poetry run python -m chatgpt.nodes.validator\n"})}),"\n",(0,a.jsxs)(n.h3,{id:"for-continuous-background-execution-use-systemd",children:["For continuous background execution, use ",(0,a.jsx)(n.strong,{children:"systemd"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"echo $(which poetry)\nsudo tee /etc/systemd/system/vana.service << EOF\n[Unit]\nDescription=Vana Validator Service\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/root/vana-dlp-chatgpt\nExecStart=/root/.local/bin/poetry run python -m chatgpt.nodes.validator\nRestart=on-failure\nRestartSec=10\nEnvironment=PATH=/root/.local/bin:/usr/local/bin:/usr/bin:/bin:/root/vana-dlp-chatgpt/myenv/bin\nEnvironment=PYTHONPATH=/root/vana-dlp-chatgpt\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable vana.service\nsudo systemctl start vana.service\nsudo systemctl status vana.service\n"})}),"\n",(0,a.jsx)(n.h3,{id:"check-logs",children:"Check logs:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo journalctl -u vana.service -f\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var a=t(6540);const s={},r=a.createContext(s);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);